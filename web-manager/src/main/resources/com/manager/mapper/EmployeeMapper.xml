<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 1. namespace 的属性要和这个 mapper 接口的全限定名一致 -->
<mapper namespace="com.manager.mapper.EmployeeMapper">
    <!-- 2.1 选择需要的语句，比如查询就写 <select>、更新就写 <update> -->
    <!-- 2.2 id 属性为 EmployeeMapper 接口定义的方法 getAllEmployees() -->
    <!-- 2.3 resultType 为方法返回值类型（比如返回数字，就写 int，返回 List<User> 就写 List 里面的 User 泛型接口的全限定名） -->
    <select id="getAllEmployees" resultType="com.manager.entity.Employee">
        <!-- 3. SQL 语句 -->
        select * from employee
    </select>

    <!-- 完整的动态条件分页查询 -->
    <select id="queryPage" resultType="com.manager.entity.Employee">
        select e.*, d.name as deptName from employee as e left outer join department as d on e.dept_id = d.id
        <!-- <where> 标签可以根据判断条件自动添加 where 关键字，也可以去掉第一个多余的 and 或者 or -->
        <where>
            <if test="account != null and account != ''">
                <!-- #{} 在字符串 '' 中不起作用，需要使用 concat() 进行连接 -->
                e.account like concat('%', #{account}, '%')
            </if>
            <if test="gender != null">
                and e.gender = #{gender}
            </if>
            <if test="entryDateBegin != null and entryDateEnd != null">
                and e.entry_date between #{entryDateBegin} and #{entryDateEnd}
            </if>
        </where>
        order by e.update_time desc
    </select>

    <!-- 创建员工信息 -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into employee
        values (null, #{account}, #{password}, #{username}, #{gender}, #{phone}, #{deptId}, #{job}, #{salary}, #{avatar}, #{entryDate}, #{createTime}, #{updateTime})
    </insert>

    <!-- 批量删除员工信息 -->
    <delete id="deleteBatch">
        delete from employee where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            ${id}
        </foreach>
    </delete>
</mapper>