<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 1. namespace 的属性要和这个 mapper 接口的全限定名一致 -->
<mapper namespace="com.manager.mapper.EmployeeMapper">
    <!-- 2.1 选择需要的语句，比如查询就写 <select>、更新就写 <update> -->
    <!-- 2.2 id 属性为 EmployeeMapper 接口定义的方法 getAllEmployees() -->
    <!-- 2.3 resultType 为方法返回值类型（比如返回数字，就写 int，返回 List<User> 就写 List 里面的 User 泛型接口的全限定名） -->
    <select id="getAllEmployees" resultType="com.manager.entity.Employee">
        <!-- 3. SQL 语句 -->
        select * from employee
    </select>

    <!-- 完整的动态条件分页查询 -->
    <select id="queryPage" resultType="com.manager.entity.Employee">
        select e.*, d.name as deptName from employee as e left outer join department as d on e.dept_id = d.id
        <!-- <where> 标签可以根据判断条件自动添加 where 关键字，也可以去掉第一个多余的 and 或者 or -->
        <where>
            <if test="account != null and account != ''">
                <!-- #{} 在字符串 '' 中不起作用，需要使用 concat() 进行连接 -->
                e.account like concat('%', #{account}, '%')
            </if>
            <if test="gender != null">
                and e.gender = #{gender}
            </if>
            <if test="entryDateBegin != null and entryDateEnd != null">
                and e.entry_date between #{entryDateBegin} and #{entryDateEnd}
            </if>
        </where>
        order by e.update_time desc
    </select>

    <!-- 创建员工信息 -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into employee
        values (null, #{account}, #{password}, #{username}, #{gender}, #{phone}, #{deptId}, #{job}, #{salary},
        #{avatar}, #{entryDate}, #{createTime}, #{updateTime})
    </insert>

    <!-- 批量删除员工信息 -->
    <delete id="deleteBatch">
        delete from employee where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            ${id}
        </foreach>
    </delete>

    <!-- 根据员工 id 连表查询员工详情（包括经历） -->
    <!--suppress LanguageDetectionInspection -->
    <select id="getById" resultMap="employeeMap">
        select  emp.*,
                exp.id as exp_id,
                exp.employee_id as exp_employee_id,
                exp.company as exp_company,
                exp.job as exp_job,
                exp.begin as exp_begin,
                exp.end as exp_end
        from employee as emp
                left outer join experience as exp
                        on emp.id = exp.employee_id
        where emp.id = #{id}
    </select>

    <!-- <resultMap> 定义如何将查询结果映射到 Java 对象，适合处理一对多或多对多关系的数据映射 -->
    <!-- id 对应 <select> 中 resultMap 的值 -->
    <!-- type 对应当前映射的 Java 对象的类型 -->
    <!-- autoMapping 自动将数据库的值映射到 Java 对象属性上（前提是字段名一样，含下划线和驼峰转换，默认 false） -->
    <resultMap id="employeeMap" type="com.manager.entity.Employee" autoMapping="true">
        <!-- 主键映射 -->
        <!-- column：当前查询结果的哪一列 -->
        <!-- property：Java 对象的属性 -->
        <id column="id" property="id"/>

        <!-- collection：用于处理一对多关系，即一个 Java 对象包含多个子对象（如 Employee 包含多个 experience）-->
        <!-- property： Java 子对象的属性名 -->
        <!-- ofType：子对象的类型 -->
        <collection property="experienceList" ofType="com.manager.entity.EmployeeExperience">
            <!-- <result> 映射普通字段 -->
            <!-- column： <select> 中查询的字段 -->
            <!-- property： 子对象中元素的属性名 -->
            <result column="exp_id" property="id" />
            <result column="exp_employee_id" property="employeeId" />
            <result column="exp_job" property="job" />
            <result column="exp_company" property="company" />
            <result column="exp_begin" property="begin" />
            <result column="exp_end" property="end" />
        </collection>
    </resultMap>

    <!-- 动态更新员工信息 -->
    <update id="update">
        update employee
        <set>
            <if test="account != null">
                account = #{account},
            </if>
            <if test="password != null">
                password = #{password},
            </if>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="gender != null">
                gender = #{gender},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="deptId != null">
                dept_id = #{deptId},
            </if>
            <if test="job != null">
                job = #{job},
            </if>
            <if test="salary != null">
                salary = #{salary},
            </if>
            <if test="avatar != null">
                avatar = #{avatar},
            </if>
            <if test="entryDate != null">
                entry_date = #{entryDate},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
        </set>
        where id = #{id}
    </update>
</mapper>